package com.ecommerce.product.service.impl;

import java.util.List;

import org.springframework.stereotype.Service;

import com.ecommerce.common.exception.ResourceNotFoundException;
import com.ecommerce.product.model.Product;
import com.ecommerce.product.repository.ProductRepository;
import com.ecommerce.product.service.ProductService;

@Service
public class ProductServiceImpl implements ProductService {
	private ProductRepository productRepository;

	public ProductServiceImpl(ProductRepository productRepository) {
		super();
		this.productRepository = productRepository;
	}

	/**
	 * @param product the product to be added
	 * @return the product that has been added
	 * @apiNote creates a new product
	 */
	@Override
	public Product saveProduct(Product product) {
		return productRepository.save(product);
	}

	/**
	 * @return List of Product Objects
	 * @apiNote returns all the products
	 */
	@Override
	public List<Product> getAllProducts() {
		return productRepository.findAll();
	}
	
	/**
	 * @param id
	 * @return
	 * @apiNote Returns Product object if found else throws ResourceNotFoundException 
	 */
	@Override
	public Product getProductById(long id) {
		/*
		 * Optional<Product> product = productRepository.findById(id); if
		 * (product.isPresent()) { return product.get(); } else { throw new
		 * ResourceNotFoundException("Product", "Id", id); }
		 */
		return productRepository.findById(id).orElseThrow(() -> new ResourceNotFoundException("Product", "Id", id));
	}
	/**
	 * @param product contains fiels to be updated
	 * @param id the product id
	 * @return the updated product
	 * @apiNote Checks with id if product present.Returns updated product if present else throws ResourceNotFoundException
	 */
	@Override
	public Product updateProduct(Product product, long id) {
		// TODO Auto-generated method stub
		Product existingProduct=productRepository.findById(id).orElseThrow(() -> new ResourceNotFoundException("Product", "Id", id));
		existingProduct.setActive(product.isActive());
		existingProduct.setCategory(product.getCategory());
		existingProduct.setDescription(product.getDescription());
		existingProduct.setImageUrl(product.getImageUrl());
		existingProduct.setName(product.getName());
		existingProduct.setSku(product.getSku());
		existingProduct.setUnitPrice(product.getUnitPrice());
		existingProduct.setUnitsInStock(product.getUnitsInStock());
		
		productRepository.save(existingProduct);
		return existingProduct;
	}
	/**
	 * @param id the product id
	 * @apiNote Checks with id if product present.Deletes product if present else throws ResourceNotFoundException
	 */
	@Override
	public void deleteProduct(long id) {
		productRepository.findById(id).orElseThrow(() -> new ResourceNotFoundException("Product", "Id", id));
		productRepository.deleteById(id);		
	}

}