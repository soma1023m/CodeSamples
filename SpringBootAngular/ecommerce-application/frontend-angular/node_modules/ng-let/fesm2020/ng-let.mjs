import * as i0 from '@angular/core';
import { Directive, Input, NgModule } from '@angular/core';

class NgLetDirective {
    // eslint-disable-next-line no-unused-vars
    constructor(viewContainer, templateRef) {
        this.viewContainer = viewContainer;
        this.templateRef = templateRef;
        this.context = { ngLet: null, $implicit: null };
        this.hasView = false;
    }
    set ngLet(value) {
        this.context.$implicit = this.context.ngLet = value;
        if (!this.hasView) {
            this.viewContainer.createEmbeddedView(this.templateRef, this.context);
            this.hasView = true;
        }
    }
    /**
     * Asserts the correct type of the context for the template that `NgLet` will render.
     *
     * The presence of this method is a signal to the Ivy template type-check compiler that the
     * `NgLet` structural directive renders its template with a specific context type.
     */
    static ngTemplateContextGuard(dir, ctx) {
        return true;
    }
}
NgLetDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NgLetDirective, deps: [{ token: i0.ViewContainerRef }, { token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
NgLetDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.1", type: NgLetDirective, selector: "[ngLet]", inputs: { ngLet: "ngLet" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NgLetDirective, decorators: [{
            type: Directive,
            args: [{
                    // tslint:disable-next-line: directive-selector
                    selector: '[ngLet]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.TemplateRef }]; }, propDecorators: { ngLet: [{
                type: Input
            }] } });

class NgLetModule {
}
NgLetModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NgLetModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NgLetModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NgLetModule, declarations: [NgLetDirective], exports: [NgLetDirective] });
NgLetModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NgLetModule, providers: [], imports: [[]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: NgLetModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [NgLetDirective],
                    imports: [],
                    exports: [NgLetDirective],
                    providers: []
                }]
        }] });

/*
 * Public API Surface of ng-let
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NgLetDirective, NgLetModule };
//# sourceMappingURL=ng-let.mjs.map
